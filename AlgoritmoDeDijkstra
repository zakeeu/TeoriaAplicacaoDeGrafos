import math

class HeapMin:

    ##adiciona nós
    def __init__(self):
        
        self.nos = 0
        self.heap = []

    ##adiciona o peso e o vertice  relacionado ao peso
    def adiciona_no(self, u, indice):
        
        self.heap.append([u, indice])
        self.nos += 1
        f = self.nos

        ##faz as comparações pra saber qual o menor indice
        while True:
            
            if f == 1:
                break
            p = f // 2
            
            if self.heap[p-1][0] <= self.heap[f-1][0]:
                break
            
            else:
                self.heap[p-1], self.heap[f-1] = self.heap[f-1], self.heap[p-1]
                f = p

    ##exibe o heap
    def mostra_heap(self):
        
        print("A estrutura heap: ")
        nivel = int(math.log(self.nos, 2))
        a = 0
       
        for i in range(nivel):
         
            for j in range(2 ** i):
                print(f'{self.heap[a]}', end='  ')
                a += 1
            print(" ")
        
        for i in range(self.nos-a):
            print(f'{self.heap[a]}', end='  ')
            a += 1
        
        print(" ")

    ##remove os nós 
    def remove_no(self):
       
        x = self.heap[0]
        self.heap[0] = self.heap[self.nos - 1]
        self.heap.pop()
        self.nos -= 1
        p = 1
        
        while True:
            
            f = 2 * p
            
            if f > self.nos:
                break
            
            if f + 1 <= self.nos:
                if self.heap[f][0] < self.heap[f-1][0]:
                    f += 1
            
            if self.heap[p-1][0] <= self.heap[f-1][0]:
                break
            
            else:
                self.heap[p-1], self.heap[f-1] = self.heap[f-1], self.heap[p-1]
                p = f
        
        return x

    ##retorna o tamanho da lista
    def tamanho(self):
        return self.nos

    ##retorna o menor elemento
    def menor_elemento(self):
        
        if self.nos != 0:
            return self.heap[0]
        return 'Arvore vazia'

    ##verifica se ha filhos a esquerda
    def filho_esquerda(self, u):
        
        if self.nos >= 2*u:
            return self.heap[2*u-1]
        return 'No sem filho a esquerda'

    ##verifica se  ha filhos a direita
    def filho_direita(self, u):
        
        if self.nos >= 2*u+1:
            return self.heap[2*u]
        return 'No sem filho a direita'
    
    ##retorna o head
    def pai(self, u):
        return self.heap[u // 2]


class Grafo:

    def __init__(self, vertices):
        
        self.vertices = vertices
        self.grafo = [[0] * self.vertices for i in range(self.vertices)]

    ##add  aresta
    def adiciona_aresta(self, u, v, peso):
    
        self.grafo[u-1][v-1] = peso
        self.grafo[v-1][u-1] = peso

    ##exibe a matriz
    def mostra_matriz(self):
        
        print('A matriz de adjacencias é:')
        for i in range(self.vertices):
            print(self.grafo[i])

    ##cria e define o algoritmo de Dijkstra
    def dijkstra(self, origem):
        
        ##Cria as listas inicializando o custo de chegar ao caminho desejado
        custo_vem = [[-1, 0] for i in range(self.vertices)]
        custo_vem[origem - 1] = [0, origem]
        
        ##adiciona quem é encontrado 
        h = HeapMin()
        h.adiciona_no(0, origem)

        ##enquanto  estiver  elementos no heap
        while h.tamanho() > 0:
            
            dist, v = h.remove_no()
            
            for i in range(self.vertices):

                ##verifica se há adjacencia para saber se é infinito ou se a distancia pode ser mensurada
                if self.grafo[v-1][i] != 0:
                   
                    ## se for infinito retorna os parametros existentes, se nao for, verifica o menor caminho. se nao houver retorna os parametros existentes
                    if custo_vem[i][0] == -1 or custo_vem[i][0] > dist + self.grafo[v-1][i]:
                        custo_vem[i] = [dist + self.grafo[v-1][i], v]
                        h.adiciona_no(dist + self.grafo[v-1][i], i+1)
        
        return custo_vem



graph = Grafo(7)
##adiciona arestas com seu peso

graph.adiciona_aresta(1, 2, 5)
graph.adiciona_aresta(1, 3, 6)
graph.adiciona_aresta(1, 4, 10)
graph.adiciona_aresta(2, 5, 13)
graph.adiciona_aresta(3, 4, 3)
graph.adiciona_aresta(3, 5, 11)
graph.adiciona_aresta(3, 6, 6)
graph.adiciona_aresta(4, 5, 6)
graph.adiciona_aresta(4, 6, 4)
graph.adiciona_aresta(5, 7, 3)
graph.adiciona_aresta(6, 7, 8)

graph.mostra_matriz()

print(" ")
result = graph.dijkstra(1)
print('Resultado do Algoritmo de Djkstra: ')
print(result)
